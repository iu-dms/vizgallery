[
  {
    "objectID": "raincloud.html",
    "href": "raincloud.html",
    "title": "Raincloud Plots",
    "section": "",
    "text": "Resources\n\n\n\nMuch of the content below comes from Cedric Scherer, a visualization and design expert known for many things, including his work with ggplot2. Find his work here: https://www.cedricscherer.com/, and his blog on raincloud plots here: https://www.cedricscherer.com/2021/06/06/visualizing-distributions-with-raincloud-plots-and-how-to-create-them-with-ggplot2/#back1\n\n\n\nBackground\nRain cloud plots were officially introduced in 2019 (https://wellcomeopenresearch.org/articles/4-63) as an approach to overcome issues of hiding the true data distribution when plotting in typical charts such as box plots. Instead, raincloud plots combine several chart types to visualize the raw data, the distribution of the data as density, and key summary statistics at the same time.\n\nBox Plots\nBox plots are used often in our type of work for summary statistics/reports, but they have limitations.\n\n\nDisplay code to generate dummy data\nset.seed(2021)\n\ngrp1 &lt;- tibble(value = seq(0, 20, length.out = 75), \n               group = \"Group 1\")\n\ngrp2 &lt;- tibble(value = c(rep(0, 5), rnorm(20, 2, .2), rnorm(50, 6, 1), \n                         rnorm(50, 14.5, 1), rnorm(20, 18, .2), rep(20, 5)), \n               group = \"Group 2\")\n\ngrp3 &lt;- tibble(value = rep(seq(0, 20, length.out = 5), 5), \n               group = \"Group 3\")\n\ndummy &lt;- bind_rows(grp1, grp2, grp3)\n\n\n\nggplot(dummy, aes(x = group, y = value)) +\n  geom_boxplot(fill = \"grey92\")\n\n\n\n\n\n\n\n\nThe above plot summarizes the data by group, but does this give a complete picture of the data?\n\n\n\n\n\n\nBox Plot Interpretation\n\n\n\n\nQuestions:\n\nHow many observations in each group?\nAre distribution patterns across the groups similar?\n\nHow can we improve this visualization?\n\nAdd raw data\nAdd overall distribution\n\n\n\n\n\n\n\nEnter The Raincloud Plot\n\n\n\nCedric Scherer shared this post about his feelings on box plots versus raincloud plots\n\n\nRaincloud plots can be used to visualize raw data, the distribution of the data, and key summary statistics at the same time. These comprise of multiple plots added together, consisting of a halved violin plot, a box plot, and the raw data as some kind of scatter plot.\nWe’ll use 3 distinct elements to make these plots as noted above, leveraging 3 different R packages:\n\nggplot2\nggdist\nggbeeswarm\n\n\n\nCode\n\nBasic Version\n\n\nDisplay/Hide code\nlibrary(palmerpenguins)\npp &lt;- penguins\n\nggplot(pp, aes(x = species, y = bill_length_mm)) + \n  ggdist::stat_halfeye(\n    adjust = .5, \n    width = .6, \n    .width = 0, \n    justification = -.2, \n    point_colour = NA\n  ) + \n  geom_boxplot(\n    width = .15, \n    outlier.shape = NA\n  ) +\n  ggbeeswarm::geom_quasirandom(\n    shape=21,\n    width=.2) \n\n\n\n\n\n\n\n\n\nThis basic plot gives us much more information, and doesn’t look bad at all. However, the formatting possibilities are endless! Using these separate plots allow maximum flexibility to fit your use case.\n\n\nAddtional Formatting Applied\n\n\nDisplay code\nnew_labels &lt;- c(\"Adelie\"=\"ADELIE\",\n                      \"Gentoo\"=\"GENTOO\",\n                      \"Chinstrap\"=\"CHINSTRAP\")\n\npal &lt;- c(\"#FF8C00\", \"#A034F0\", \"#159090\")\n\nrcplot &lt;- function(titletext, captext){\n  ggplot(pp, aes(x=species, y=bill_length_mm, fill=species)) +\n    \n  ggdist::stat_halfeye(\n      adjust = .5, \n      width = 1.0, \n      .width = 0, \n      justification = -0.3, \n      point_colour = NA,\n      alpha=0.6)+\n    \n  geom_boxplot(width=0.4, color=\"black\", outlier.shape = NA, alpha=.2) +\n    \n  ggbeeswarm::geom_quasirandom(aes(color=species),\n    shape=21,                           \n    size = 2,\n    alpha = 0.3,\n    width = .2) +\n    \n  labs(x='', \n       y='Bill Length (mm)', \n       title = titletext, \n       subtitle = captext,\n       caption = \"Gorman KB, Williams TD, Fraser WR (2014)\"\n       )+\n  scale_color_manual(values = pal, guide = \"none\") +\n  scale_fill_manual(values = pal, guide = \"none\") +\n  facet_grid(cols=vars(species), scales=\"free_x\", labeller = labeller(species=new_labels))+\n  theme_classic()+\n  theme(legend.position=\"none\", \n        legend.title = element_blank(), \n        plot.title = element_text(size=14, face=\"bold\"),\n        plot.subtitle = element_text(size=10, lineheight = 0.5 ), \n        axis.text.y=element_text(size=8, face=\"plain\"), \n        axis.title.y = element_text(size=8, face=\"plain\"), \n        axis.text.x=element_blank(),\n        axis.ticks.x=element_blank())+\n  theme(strip.background =element_rect(fill='white'))\n\n}\n\nplot &lt;- rcplot(paste0(\"Figure 1. Bill Length by Species (n=\", as.numeric(length(na.omit(pp$bill_length_mm))) , \")\"),\n               \"Bill Length in mm by species from the palmer penguins dataset\")\n\nplot\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nUse caution with color usage, as it is often not necessary. If reports will be consumed electronically, colors like used above would be accepatable. However, in some cases, say if reports will be printed often, using a color scheme of sequential blues (for example) would save sites/project teams ink usage and by most user friendly. See below for a custom blue scale that has worked well when sending to resource limited settings where printed reports are needed.\n\n\n\nBLUE_0 &lt;- \"#dbe3ed\" \nBLUE_25 &lt;- \"#b3c4e0\"\nBLUE_50 &lt;-\"#788dae\"  \nBLUE_75 &lt;- \"#5a7296\"\nBLUE_99 &lt;-  \"#3c567d\" \nBLUE_100 &lt;-  \"#334b6e\" \nNAGRAY &lt;- \"#cccccc\" # GRAY for NA values\n\n\n\n\nCedric Scherer shared this post about his feelings on box plots versus raincloud plots",
    "crumbs": [
      "Home",
      "Templates",
      "Raincloud Plots"
    ]
  },
  {
    "objectID": "enrollment.html",
    "href": "enrollment.html",
    "title": "Enrollment Tracking",
    "section": "",
    "text": "Background\nOften in our projects there will be a potential need to track study recruitment, and provide some descriptive information on the study cohort. Below are examples of some of the ways this can be done easily in R.\n\n\nData Structure\nTo replicate this plot, you would need to re-structure your data into the following format:\n\n\nRequired Variables\n\n\n\n\n\n\n\n\nVariable\nFormat\nDescription\n\n\n\n\nid\nNumeric or Alphanumeric\nUnique, anonymous, patient identifier. This can be in any project-specific format. Required in all rows\n\n\nenrol_d\nDate (yyyy-mm-dd)\nDate of enrollment. Must be in specified format. Required in all rows\n\n\ntarget\nInteger\nStudy enrollment target. Should be the same value in every row.\n\n\nstart_d\nDate (yyyy-mm-dd)\nStart date of study enrollment. Should be the same value in every row.\n\n\nend_d\nDate (yyyy-mm-dd)\nEnd date of study enrollment. Should be the same value in every row.\n\n\nage\nNumeric (integer or decimal)\nLeave blank if unknown\n\n\nsex\nM/F/O\nBiological sex at birth of patient. Leave blank if unknown. M, Male F, Female O, Other\n\n\n\n\n\nOptional Variables\nNote: Although not used in any examples below, summary information will often be needed on racial distribution, and potentially on different groups/arms of your study.\n\n\n\n\n\n\n\n\nVariable\nFormat\nDescription\n\n\n\n\nrace\nNumeric\nFollow standard coding from NIH. Leave blank if unknown. 1, American Indian or Alaska Native 2, Asian 3, Black or African American 5, Native Hawaiian or Other Pacific Islander 6, Unknown 7, White 8, Multi-racial 9, Other\n\n\ngroup\nCharacter or numeric (integer)\nTo stratify overall report by group or generate individual group reports. This could be treatment versus control, multiple study sites, etc.\n\n\n\n\n\nRecruitment Plot\nTo track recruitment, specifically against a target, see below for an example. There are plenty of options to provide this information to your desired audience, this is just one potential option. This example creates a plot that includes longitudinal tracking of cumulative recruitment against a target, calculates a estimated metric of recruitment needed to meet target by the end of recruitment, and provides bars to show trend in weekly recruitment. Get creative and use this as a template to style a plot that best fits your study!\n\ndf &lt;- read_xlsx(\"EnrollReport_Input_Example.xlsx\",  guess_max = 1000)\nhead(df)\n\n# A tibble: 6 × 9\n     id enrol_d    target start_d    end_d        age sex    race group         \n  &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;         \n1     1 2020-03-17    150 2020-03-01 2021-01-01    52 M         9 Treatment Gro…\n2     2 2020-03-17    150 2020-03-01 2021-01-01    40 M         8 Treatment Gro…\n3     3 2020-03-17    150 2020-03-01 2021-01-01    50 M         5 Control Group \n4     4 2020-03-18    150 2020-03-01 2021-01-01    19 M         1 Third Group   \n5     5 2020-03-22    150 2020-03-01 2021-01-01    57 F         3 Control Group \n6     6 2020-04-21    150 2020-03-01 2021-01-01    39 F         7 Treatment Gro…\n\n\n\n\nDisplay/Hide plot code\n#format data as necessary\nenrolldata &lt;- df  |&gt;  \n  mutate(enrol_d=as.Date(enrol_d)) |&gt;\n  mutate(sex=toupper(sex)) |&gt; \n  mutate(age=as.numeric(floor(age))) |&gt; \n  mutate(enrol_w=floor_date(as.Date(enrol_d), \"week\")) |&gt; \n  mutate(start_d=as.Date(start_d)) |&gt; \n  mutate(end_d=as.Date(end_d)) |&gt; \n  mutate(interval=interval(start_d, end_d) ) |&gt; \n  mutate(avg= max(target) / time_length(interval, unit=\"days\") ) |&gt; \n  mutate(interval2=interval(max(as.Date(enrol_d)), as.Date(end_d)) ) |&gt; \n  mutate(weeksleft=time_length(interval2, unit=\"weeks\") ) |&gt;\n  select(-c(interval, interval2))\n  \n#calculate total number of IDs\ntotalids &lt;- as.numeric(n_distinct(enrolldata$id))\n\n#calculate count per week and cumulative sum\ncount &lt;- enrolldata |&gt;\n  group_by(enrol_w) |&gt;\n  summarise(count = n()) \ncumsum &lt;- count |&gt;\n    summarize(cumsum = cumsum(count)) \n\ntotenrol &lt;- cbind(count, cumsum)\n\n#calculate date range and the recruitment metric\ndaterange &lt;- enrolldata |&gt; \n    complete(enrol_d= seq.Date(min(start_d), max(end_d), by=\"day\")) |&gt; \n    mutate(avg=max(enrolldata$avg)) |&gt; \n    group_by(enrol_d) |&gt; \n    summarize(avg=max(avg)) |&gt; \n    mutate(cumavg=cumsum(avg))\n\ngoalavg &lt;- round( ( as.numeric(max(enrolldata$target)) - as.numeric(max(cumsum$cumsum, na.rm =T)) ) /\n                    max(enrolldata$weeksleft), 1)\n\naccent1 &lt;- RColorBrewer::brewer.pal(5, \"Dark2\")\n\nplot &lt;-  ggplot() + \n  geom_line(data=totenrol, aes(x=enrol_w, y=cumsum), linetype=\"solid\", color=accent1[4]  )+ \n  geom_line(data=daterange, aes(x=enrol_d, y=cumavg), linetype=\"dashed\")+\n  geom_point(data=totenrol, aes(x=enrol_w, y=cumsum), size = 1.5, color=accent1[4]) +\n  geom_bar(data=totenrol, stat=\"identity\",  fill=\"grey50\", alpha=0.8, color=\"black\", aes(x=enrol_w, y=count))+\n  scale_x_date(date_labels=\"%b-%y\", breaks=pretty_breaks())+\n  scale_y_continuous(breaks = pretty_breaks())+\n  xlab(\"Enrollment  Date\") + \n  ylab(\"Number Enrolled\") + \n  labs(title = paste0(\"Overall Weekly Enrollment Actual vs. Target (N=\",totalids, \")\" ), \n       subtitle = paste0(\"Note: Based on data available, an average of \", goalavg, \" patients need to be recruited per week to meet enrollment target.\") ) +\n  theme_minimal()+\n  theme(plot.title = element_text(hjust = 0), \n        legend.position=\"none\", \n        legend.title = element_blank(),\n        plot.subtitle = element_text(size=9), \n        plot.caption = element_text(hjust=0)) \n\nplot\n\n\n\n\n\n\n\n\n\n\n\nPopulation Pyramid\nMany studies recruit based on some weighting schema, often based on age and sex. To quickly view recruitment metrics across 2 characteristics such as these, try this visulaization often referred to as a “population pyramid” or “age-sex pyramid”. There are packages that produce these plots quickly, but using ggplot2 allows for better customization, if you like that sort of thing.\n\n\nDisplay/Hide plot code\nenrolldata$sex &lt;- ordered(enrolldata$sex, levels= c('F', 'M', 'O'), labels=c('Female', 'Male', 'Other'))\n\nsexdist &lt;- enrolldata %&gt;% \n  filter(!is.na(age)) %&gt;% \n  mutate(agebin = cut(age, breaks = c(0, 10, 20, 30, 40, 50, 60, 70),  \n                       c(\"0-10\", \"11-20\", \"21-30\", \"31-40\", \"41-50\", \"51-60\", \"61-70\" ))) |&gt; \n  filter(sex==\"Male\" | sex==\"Female\") %&gt;% \n  group_by(sex, agebin) %&gt;% \n  summarise(count=n()) %&gt;% \n  mutate(count = ifelse(sex == \"Female\",count, -1*count)) \n\nbreaks_values &lt;- pretty(-max(sexdist$count):max(sexdist$count))\n\nsexhist &lt;- sexdist %&gt;%\n  ggplot(aes(x = agebin, y = count, fill = sex))+\n  geom_bar(stat = \"identity\", color=\"black\", alpha=0.75)+\n  geom_text(aes(label=abs(count)), position=position_stack(vjust=0.5), color=\"black\",size=3)+\n  coord_flip()+\n  scale_y_continuous(limits = c(-max(sexdist$count),max(sexdist$count)),\n                     breaks = breaks_values,\n                     labels = abs(breaks_values) )+\n  geom_hline(yintercept = 0)+\n  scale_fill_brewer(palette=\"Dark2\")+\n  xlab(\"Age (5 year bin)\") + ylab(\"Number Enrolled\")+\n  labs(title = \"Enrollment by Sex and Age\", subtitle=\"Note: Includes Male and Female Only\") +\n  theme_minimal()+\n  theme(plot.title = element_text(hjust = 0), legend.position=\"right\", legend.title = element_blank(), \n        plot.subtitle = element_text(size=9), plot.caption = element_text(hjust=0)) \n\nplot(sexhist)",
    "crumbs": [
      "Home",
      "Templates",
      "Enrollemnt"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "BHDS Data Management Visualization Guide",
    "section": "",
    "text": "Introduction\nThis website is meant to be a resource for users interested in learning more about data visualization in R, paticularly for use cases that arise in our daily data management work. This site will contain code to help users get started with a variety of data visualizations commonly used in our work. While these plots can often be used to distribute summary data to project teams or other external audiences, many of these solutions can also help data managers ensure data quality and alert project staff if any data issues are present.\nFor many basic, and some advanced R plots, consider familiarizing yourself with the great R Graph Gallery https://r-graph-gallery.com/. Many techniques that will be very beneficial in your work will be illustrated there, and will not be repeated in this resource. This site aims to expand on exisiting R visualization resources and generate templates for our group to leverage within their project work."
  }
]