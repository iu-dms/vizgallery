[
  {
    "objectID": "raincloud.html",
    "href": "raincloud.html",
    "title": "Raincloud Plots",
    "section": "",
    "text": "Resources\n\n\n\nMuch of the content below comes from Cedric Scherer, a visualization and design expert known for many things, including his work with ggplot2. Find his work here: https://www.cedricscherer.com/, and his blog on raincloud plots here: https://www.cedricscherer.com/2021/06/06/visualizing-distributions-with-raincloud-plots-and-how-to-create-them-with-ggplot2/#back1\n\n\n\nBackground\nRain cloud plots were officially introduced in 2019 (https://wellcomeopenresearch.org/articles/4-63) as an approach to overcome issues of hiding the true data distribution when plotting in typical charts such as box plots. Instead, raincloud plots combine several chart types to visualize the raw data, the distribution of the data as density, and key summary statistics at the same time.\n\nBox Plots\nBox plots are used often in our type of work for summary statistics/reports, but they have limitations.\n\n\nDisplay code to generate dummy data\nset.seed(2021)\n\ngrp1 &lt;- tibble(value = seq(0, 20, length.out = 75), \n               group = \"Group 1\")\n\ngrp2 &lt;- tibble(value = c(rep(0, 5), rnorm(20, 2, .2), rnorm(50, 6, 1), \n                         rnorm(50, 14.5, 1), rnorm(20, 18, .2), rep(20, 5)), \n               group = \"Group 2\")\n\ngrp3 &lt;- tibble(value = rep(seq(0, 20, length.out = 5), 5), \n               group = \"Group 3\")\n\ndummy &lt;- bind_rows(grp1, grp2, grp3)\n\n\n\nggplot(dummy, aes(x = group, y = value)) +\n  geom_boxplot(fill = \"grey92\")\n\n\n\n\n\n\n\n\nThe above plot summarizes the data by group, but does this give a complete picture of the data?\n\n\n\n\n\n\nBox Plot Interpretation\n\n\n\n\nQuestions:\n\nHow many observations in each group?\nAre distribution patterns across the groups similar?\n\nHow can we improve this visualization?\n\nAdd raw data\nAdd overall distribution\n\n\n\n\n\n\n\nEnter The Raincloud Plot\n\n\n\nCedric Scherer shared this post about his feelings on box plots versus raincloud plots\n\n\nRaincloud plots can be used to visualize raw data, the distribution of the data, and key summary statistics at the same time. These comprise of multiple plots added together, consisting of a halved violin plot, a box plot, and the raw data as some kind of scatter plot.\nWe’ll use 3 distinct elements to make these plots as noted above, leveraging 3 different R packages:\n\nggplot2\nggdist\nggbeeswarm\n\n\n\nCode\n\nBasic Version\n\n\nDisplay/Hide code\nlibrary(palmerpenguins)\npp &lt;- penguins\n\nggplot(pp, aes(x = species, y = bill_length_mm)) + \n  ggdist::stat_halfeye(\n    adjust = .5, \n    width = .6, \n    .width = 0, \n    justification = -.2, \n    point_colour = NA\n  ) + \n  geom_boxplot(\n    width = .15, \n    outlier.shape = NA\n  ) +\n  ggbeeswarm::geom_quasirandom(\n    shape=21,\n    width=.2) \n\n\n\n\n\n\n\n\n\nThis basic plot gives us much more information, and doesn’t look bad at all. However, the formatting possibilities are endless! Using these separate plots allow maximum flexibility to fit your use case.\n\n\nAddtional Formatting Applied\n\n\nDisplay code\nnew_labels &lt;- c(\"Adelie\"=\"ADELIE\",\n                      \"Gentoo\"=\"GENTOO\",\n                      \"Chinstrap\"=\"CHINSTRAP\")\n\npal &lt;- c(\"#FF8C00\", \"#A034F0\", \"#159090\")\n\nrcplot &lt;- function(titletext, captext){\n  ggplot(pp, aes(x=species, y=bill_length_mm, fill=species)) +\n    \n  ggdist::stat_halfeye(\n      adjust = .5, \n      width = 1.0, \n      .width = 0, \n      justification = -0.3, \n      point_colour = NA,\n      alpha=0.6)+\n    \n  geom_boxplot(width=0.4, color=\"black\", outlier.shape = NA, alpha=.2) +\n    \n  ggbeeswarm::geom_quasirandom(aes(color=species),\n    shape=21,                           \n    size = 2,\n    alpha = 0.3,\n    width = .2) +\n    \n  labs(x='', \n       y='Bill Length (mm)', \n       title = titletext, \n       subtitle = captext,\n       caption = \"Gorman KB, Williams TD, Fraser WR (2014)\"\n       )+\n  scale_color_manual(values = pal, guide = \"none\") +\n  scale_fill_manual(values = pal, guide = \"none\") +\n  facet_grid(cols=vars(species), scales=\"free_x\", labeller = labeller(species=new_labels))+\n  theme_classic()+\n  theme(legend.position=\"none\", \n        legend.title = element_blank(), \n        plot.title = element_text(size=14, face=\"bold\"),\n        plot.subtitle = element_text(size=10, lineheight = 0.5 ), \n        axis.text.y=element_text(size=8, face=\"plain\"), \n        axis.title.y = element_text(size=8, face=\"plain\"), \n        axis.text.x=element_blank(),\n        axis.ticks.x=element_blank())+\n  theme(strip.background =element_rect(fill='white'))\n\n}\n\nplot &lt;- rcplot(paste0(\"Figure 1. Bill Length by Species (n=\", as.numeric(length(na.omit(pp$bill_length_mm))) , \")\"),\n               \"Bill Length in mm by species from the palmer penguins dataset\")\n\nplot\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nUse caution when considering color. If reports will be consumed electronically, colors like used above would be acceptable. However, in some cases, say if reports will be printed, using a color scheme of sequential blues (for example) would save sites/project teams ink usage and be most user friendly. See below for a custom blue scale that has worked well when sending reports to resource limited settings where printed reports are used.\n\n\n\nBLUE_0 &lt;- \"#dbe3ed\" \nBLUE_25 &lt;- \"#b3c4e0\"\nBLUE_50 &lt;-\"#788dae\"  \nBLUE_75 &lt;- \"#5a7296\"\nBLUE_99 &lt;-  \"#3c567d\" \nBLUE_100 &lt;-  \"#334b6e\" \nNAGRAY &lt;- \"#cccccc\" # GRAY for NA values\n\n\n\n\nCedric Scherer shared this post about his feelings on box plots versus raincloud plots",
    "crumbs": [
      "Home",
      "Visualization Guides",
      "Raincloud Plots"
    ]
  },
  {
    "objectID": "enrollment.html",
    "href": "enrollment.html",
    "title": "Enrollment Tracking",
    "section": "",
    "text": "Background\nOften in our projects there will be a potential need to track study recruitment, and provide some descriptive information on the study cohort. Below are examples of some of the ways this can be done easily in R. If there are plots you would like to produce and need assistance, or have code that you think would be useful to the group please email browstev@iu.edu with your suggestions!\n\n\nData Structure\nTo replicate the plots below, you would need to structure your data similarly to the following format. A test dataset is available to download here\n\n\nGeneral Variable List\nThe variables listed below will generally be useful to provide a good summary of the study population/\n\n\n\n\n\n\n\n\nVariable\nFormat\nDescription\n\n\n\n\nid\nNumeric or Alphanumeric\nUnique, anonymous, patient identifier. This can be in any project-specific format. Required in all rows\n\n\nenrol_d\nDate (yyyy-mm-dd)\nDate of enrollment. Must be in specified format. Required in all rows\n\n\ntarget\nInteger\nStudy enrollment target. Should be the same value in every row.\n\n\nstart_d\nDate (yyyy-mm-dd)\nStart date of study enrollment. Should be the same value in every row.\n\n\nend_d\nDate (yyyy-mm-dd)\nEnd date of study enrollment. Should be the same value in every row.\n\n\nage\nNumeric (integer or decimal)\nLeave blank if unknown\n\n\nsex\nM/F/O\nBiological sex at birth of patient. Leave blank if unknown. M, Male F, Female O, Other\n\n\nrace\nNumeric\nFollow standard coding from NIH. Leave blank if unknown. 1, American Indian or Alaska Native 2, Asian 3, Black or African American 5, Native Hawaiian or Other Pacific Islander 6, Unknown 7, White 8, Multi-racial 9, Other\n\n\ngroup\nCharacter or numeric (integer)\nTo stratify overall report by group or generate individual group reports. This could be treatment versus control, multiple study sites, etc.\n\n\n\n\n\nRecruitment Plot\nTo track recruitment, specifically against a target, see below for an example. There are plenty of options to provide this information to your desired audience, this is just one potential option. This example creates a plot that includes longitudinal tracking of cumulative recruitment against a target, calculates a estimated metric of recruitment needed to meet target by the end of recruitment, and provides bars to show trend in weekly recruitment. Get creative and use this as a template to style a plot that best fits your study!\n\ndf &lt;- read_xlsx(\"EnrollReport_Input_Example.xlsx\",  guess_max = 1000)\nhead(df)\n\n# A tibble: 6 × 9\n     id enrol_d    target start_d    end_d        age sex    race group         \n  &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;         \n1     1 2020-03-17    150 2020-03-01 2021-01-01    52 M         9 Treatment Gro…\n2     2 2020-03-17    150 2020-03-01 2021-01-01    40 M         8 Treatment Gro…\n3     3 2020-03-17    150 2020-03-01 2021-01-01    50 M         5 Control Group \n4     4 2020-03-18    150 2020-03-01 2021-01-01    19 M         1 Third Group   \n5     5 2020-03-22    150 2020-03-01 2021-01-01    57 F         3 Control Group \n6     6 2020-04-21    150 2020-03-01 2021-01-01    39 F         7 Treatment Gro…\n\n\n\n\nDisplay/Hide plot code\n#format data as necessary\nenrolldata &lt;- df  |&gt;  \n  mutate(enrol_d=as.Date(enrol_d)) |&gt;\n  mutate(sex=toupper(sex)) |&gt; \n  mutate(age=as.numeric(floor(age))) |&gt; \n  mutate(enrol_w=floor_date(as.Date(enrol_d), \"week\")) |&gt; \n  mutate(start_d=as.Date(start_d)) |&gt; \n  mutate(end_d=as.Date(end_d)) |&gt; \n  mutate(interval=interval(start_d, end_d) ) |&gt; \n  mutate(avg= max(target) / time_length(interval, unit=\"days\") ) |&gt; \n  mutate(interval2=interval(max(as.Date(enrol_d)), as.Date(end_d)) ) |&gt; \n  mutate(weeksleft=time_length(interval2, unit=\"weeks\") ) |&gt;\n  select(-c(interval, interval2))\n  \n#calculate total number of IDs\ntotalids &lt;- as.numeric(n_distinct(enrolldata$id))\n\n#calculate count per week and cumulative sum\ncount &lt;- enrolldata |&gt;\n  group_by(enrol_w) |&gt;\n  summarise(count = n()) \ncumsum &lt;- count |&gt;\n    summarize(cumsum = cumsum(count)) \n\ntotenrol &lt;- cbind(count, cumsum)\n\n#calculate date range and the recruitment metric\ndaterange &lt;- enrolldata |&gt; \n    complete(enrol_d= seq.Date(min(start_d), max(end_d), by=\"day\")) |&gt; \n    mutate(avg=max(enrolldata$avg)) |&gt; \n    group_by(enrol_d) |&gt; \n    summarize(avg=max(avg)) |&gt; \n    mutate(cumavg=cumsum(avg))\n\ngoalavg &lt;- round( ( as.numeric(max(enrolldata$target)) - as.numeric(max(cumsum$cumsum, na.rm =T)) ) /\n                    max(enrolldata$weeksleft), 1)\n\naccent1 &lt;- RColorBrewer::brewer.pal(5, \"Dark2\")\n\nplot &lt;-  ggplot() + \n  geom_line(data=totenrol, aes(x=enrol_w, y=cumsum), linetype=\"solid\", color=accent1[4]  )+ \n  geom_line(data=daterange, aes(x=enrol_d, y=cumavg), linetype=\"dashed\")+\n  geom_point(data=totenrol, aes(x=enrol_w, y=cumsum), size = 1.5, color=accent1[4]) +\n  geom_bar(data=totenrol, stat=\"identity\",  fill=\"grey50\", alpha=0.8, color=\"black\", aes(x=enrol_w, y=count))+\n  scale_x_date(date_labels=\"%b-%y\", breaks=pretty_breaks())+\n  scale_y_continuous(breaks = pretty_breaks())+\n  xlab(\"Enrollment  Date\") + \n  ylab(\"Number Enrolled\") + \n  labs(title = paste0(\"Overall Weekly Enrollment Actual vs. Target (N=\",totalids, \")\" ), \n       subtitle = paste0(\"Note: Based on data available, an average of \", goalavg, \" patients need to be recruited per week to meet enrollment target.\") ) +\n  theme_minimal()+\n  theme(plot.title = element_text(hjust = 0), \n        legend.position=\"none\", \n        legend.title = element_blank(),\n        plot.subtitle = element_text(size=9), \n        plot.caption = element_text(hjust=0)) \n\nplot\n\n\n\n\n\n\n\n\n\n\n\nPopulation Pyramid\nMany studies recruit based on some weighting schema, often based on age and sex. To quickly view recruitment metrics across 2 characteristics such as these, try this visulaization often referred to as a “population pyramid” or “age-sex pyramid”. There are packages that produce these plots quickly, but using ggplot2 allows for better customization, if you like that sort of thing.\n\n\nDisplay/Hide plot code\nenrolldata$sex &lt;- ordered(enrolldata$sex, levels= c('F', 'M', 'O'), labels=c('Female', 'Male', 'Other'))\n\nsexdist &lt;- enrolldata %&gt;% \n  filter(!is.na(age)) %&gt;% \n  mutate(agebin = cut(age, breaks = c(0, 10, 20, 30, 40, 50, 60, 70),  \n                       c(\"0-10\", \"11-20\", \"21-30\", \"31-40\", \"41-50\", \"51-60\", \"61-70\" ))) |&gt; \n  filter(sex==\"Male\" | sex==\"Female\") %&gt;% \n  group_by(sex, agebin) %&gt;% \n  summarise(count=n()) %&gt;% \n  mutate(count = ifelse(sex == \"Female\",count, -1*count)) \n\nbreaks_values &lt;- pretty(-max(sexdist$count):max(sexdist$count))\n\nsexhist &lt;- sexdist %&gt;%\n  ggplot(aes(x = agebin, y = count, fill = sex))+\n  geom_bar(stat = \"identity\", color=\"black\", alpha=0.75)+\n  geom_text(aes(label=abs(count)), position=position_stack(vjust=0.5), color=\"black\",size=3)+\n  coord_flip()+\n  scale_y_continuous(limits = c(-max(sexdist$count),max(sexdist$count)),\n                     breaks = breaks_values,\n                     labels = abs(breaks_values) )+\n  geom_hline(yintercept = 0)+\n  scale_fill_brewer(palette=\"Dark2\")+\n  xlab(\"Age (5 year bin)\") + ylab(\"Number Enrolled\")+\n  labs(title = \"Enrollment by Sex and Age\", subtitle=\"Note: Includes Male and Female Only\") +\n  theme_minimal()+\n  theme(plot.title = element_text(hjust = 0), legend.position=\"right\", legend.title = element_blank(), \n        plot.subtitle = element_text(size=9), plot.caption = element_text(hjust=0)) \n\nplot(sexhist)",
    "crumbs": [
      "Home",
      "Visualization Guides",
      "Enrollment Tracking"
    ]
  },
  {
    "objectID": "ae_vis.html",
    "href": "ae_vis.html",
    "title": "Adverse Event Visualization",
    "section": "",
    "text": "Background\nThe following code can be useful if you need to plot adverse events (AE) by study participant. The provided R Markdown script will produce an HTML file containing one plot per ID, highlighting AE duration across the study period. If your project has needs for additional variations of adverse event visualizations, please contact browstev@iu.edu with your suggestions!\n\n\nAdverse Event Plot\n\n\n\n\n\nData Structure\nTo replicate the AE plot described on this page with this code, you will need to provide a dataset using the exact structure below. A test dataset is available to download here\n\nVariable List\n\n\n\n\n\n\n\n\nVariable\nFormat\nDescription\n\n\n\n\nusubjid\nNumeric or Alphanumeric\nUnique, anonymous, patient identifier. This can be in any project-specific format. Required in all rows\n\n\naedecod\nCharacter\nAdverse event name. Required in all rows\n\n\naefinish\nInteger (Boolean)\nHas the adverse event concluded? 1=yes, 0=no. Required in all rows\n\n\naesev\nInteger\nAdverse event severity. Defaults to 1=Mild, 2=Moderate, 3=Severe, but this can be changed easily in script to accomodate any numeric sequence. Required in all rows\n\n\naestdate\nDate (mm/dd/yyyy)\nAdverse event start date. Must be in specified format. Required in all rows\n\n\naeendate\nDate (mm/dd/yyyy)\nAdverse event end date. Must be in specified format. Can be left blank when ID is still on study (status=1)\n\n\naeseq\nInteger\nNumeric sequence denoting chronological order. Required in all rows\n\n\nenrolldate\nDate (mm/dd/yyyy)\nDate participant enrolled into the study. Required in all rows\n\n\neosdate\nDate (mm/dd/yyyy)\nDate participant exited the study, or date study ended. Required in all rows\n\n\nstatus\nInteger\n0= OFF STUDY, 1= ON STUDY\n\n\n\n\n\nExample Dataset\nSee below for an example of the input file:\n\ninfile=\"Sample AE Data.csv\"\ndf &lt;- read.csv(infile)\nhead(df)\n\n  usubjid                aedecod aefinish aesev  aestdate  aeendate aeseq\n1       1           Leukocytosis        1     1  1/3/2016  3/6/2016     1\n2       2 Elevated liver enzymes        1     2 2/14/2016 3/26/2016     1\n3       2            Hypokalemia        1     2 2/14/2016 2/26/2016     2\n4       2           Leukocytosis        1     2 2/14/2016 3/26/2016     3\n5       2             Cellulitis        1     2 2/23/2016 3/26/2016     4\n6       2       Thrombocytopenia        1     1 2/23/2016 3/26/2016     5\n  enrolldate   eosdate status\n1   1/2/2016 6/29/2016      0\n2   2/7/2016 3/27/2016      0\n3   2/7/2016 3/27/2016      0\n4   2/7/2016 3/27/2016      0\n5   2/7/2016 3/27/2016      0\n6   2/7/2016 3/27/2016      0\n\n\n\n\n\nComplete R Markdown File\n\n\n\n\n\n\nTemplate R Markdown File\n\n\n\nWe have developed a template R Markdown file that is set to work with the sample dataset, and would only require small edits (as described below) to work with your own input file. The following sections on this page walk through some of the code highlights, and may help troubleshooting if you run into any issues modifying the code to fit your use case. You can download the R Markdown file using this link: Template .Rmd File\nIn that file, you will need to change the path to the “infile” dataframe on line 32. This should be the path to your AE data file.\n\n\n\n\nCode Walkthrough\nThe following sections give a summary of the steps taken to process the input file and build the visualization.\n\nPackage Dependencies\nThe code below is an efficient way to load packages at the beginning of an R script. The below code includes all of the package dependencies for the AE visualization code.\n\npackages &lt;- c(\"tidyverse\", \"ggplot2\", \"scales\", \"RColorBrewer\", \n              \"forcats\", \"ggforce\", \"pagedown\", \"htmltools\", \"ggh4x\")\n\n##Install packages not yet installed\ninstalled_packages &lt;- packages %in% rownames(installed.packages())\nif (any(installed_packages == FALSE)) {\n  install.packages(packages[!installed_packages])\n}\n\n##Load Packages\ninvisible(lapply(packages, library, character.only = TRUE))\n\n\n\nData Wrangling\nFirst, we read in the data file, process the data into required formats and calculate additional fields needed for the visualization. Next the data frame is transposed into a longer structure.\n\ndatain &lt;- read.csv(infile) |&gt; \n  mutate(across(c(aestdate, aeendate, eosdate, enrolldate), ~ as.Date(.x, \"%m/%d/%Y\" ))) |&gt; \n  group_by(usubjid) |&gt; \n  mutate(aeendate=if_else(is.na(aeendate), eosdate , as.Date(aeendate))) |&gt; \n  mutate(ae_days=if_else(!is.na(aeendate), \n                         as.numeric(as.Date(aeendate, \"%m/%d/%Y\")-as.Date(aestdate, \"%m/%d/%Y\"))+1, \n                         NA_integer_)) |&gt; \n  mutate(ae_event=paste0(aedecod, \" (\", aeseq, \")\" )) |&gt; \n  mutate(cutdate=as.Date(Sys.Date()))\n  \ndatalong &lt;- datain |&gt; \n  select(usubjid, ae_event, aesev, aeseq, aefinish, enrolldate, eosdate, \n         aestdate, aeendate, ae_days, cutdate ) |&gt;\n  pivot_longer(cols = c(aestdate, aeendate), \n               names_to = \"date_type\", \n               values_to =\"datevalue\" ) |&gt; \n  arrange(usubjid, desc(aeseq)) |&gt; \n  ungroup()\n\n\n\nAE Severity Scale\nNext, we create a factor for the severity column.\n\n\n\n\n\n\nSeverity Scale Modifications\n\n\n\nThis section would need to be modified if your severity rating is different than in the example dataset as described above. Also, the scale_color_manual line of code in the ggplot2 build (see below) would need to be modified to include more (or less) colors as applicable. See https://r-graph-gallery.com/38-rcolorbrewers-palettes.html for a description of color palettes and https://www.datanovia.com/en/blog/the-a-z-of-rcolorbrewer-palette/ for more ways to work with the Rcolorbrewer package.\n\n\n\ndatalong$aesev &lt;- ordered(datalong$aesev,\n                          levels = c(1,2,3),\n                          labels = c(\"Mild\", \"Moderate\", \"Severe\"))\n\n\n\nCustomizing the Visualization\nNext we create cross-sectional datasets for all dates needed for the visualization, arguments to calculate the x-axis limits per ID, and a function for custom facet titles for each ID.\n\ndataend &lt;- datalong |&gt; \n  filter(date_type==\"aeendate\")\n\ncsdates &lt;- datalong |&gt; \n  group_by(usubjid) |&gt; \n  summarise(enrolldate=min(enrolldate, na.rm = T), \n            eosdate=max(eosdate, na.rm=T), \n            lastaeend=max(datevalue, na.rm=T),\n            cutdate=max(cutdate, na.rm = T)) |&gt; \n  mutate(cutdate=if_else(is.infinite(eosdate), \n                         as.Date(cutdate), \n                         as.Date(eosdate)))\n  \n\n# Create list of arguments to set the x-axis scale for each ID\n# Will use cutdate below so we have an end point for patients still on study\nx_scale_lim &lt;- csdates |&gt;\n  str_glue_data(\"usubjid =={usubjid} ~ scale_x_date(limits = c(as.Date('{enrolldate}'),\n                max(as.Date('{cutdate}'), as.Date('{lastaeend}'))  ),\n                date_labels = '%m/%d/%Y',\n               expand =  expansion(mult = c(.25, .25)),\n               breaks=pretty_breaks())\") %&gt;% \n  str_flatten(\", \")  %&gt;% \n  str_c(\"list(\", ., \")\") %&gt;% \n  parse(text = .) %&gt;% \n  eval()\n\n\n# Create label for facet strip\nid_labels &lt;- as_labeller(function(x) paste0('Adverse Events for Subject ID = ', x ))\n\n\n\nBuild it!\nFinally we create the ggplot object and print the report!\n\n# Structure Main Plot\nvis &lt;- ggplot(datalong, \n              aes(y=fct_reorder(ae_event, aeseq),  \n                  x=datevalue, \n                  color=aesev, \n                  label=paste0(\" \", ae_days, \"d\"))) +\n  geom_line(linewidth=5) +\n  facet_wrap_paginate(. ~ usubjid, \n                      ncol = 1, \n                      nrow=1, \n                      scales = \"free\", \n                      labeller = labeller(usubjid=id_labels)) + \n  scale_color_manual(values = c(\"#1b9e77\",  \"#7570b3\", \"#d95f02\"))+\n  geom_text(data=subset(dataend,aefinish == 1), \n            size=3, \n            color=\"black\",  \n            aes(hjust=0))+\n  geom_point(data=subset(dataend,aefinish == 0) , \n             aes(x=datevalue,y=ae_event,fill=aesev, color=aesev, hjust=0, vjust=0),\n             shape=\"\\u279c\", size=6, show.legend = F) +\n  geom_point(data=subset(dataend,ae_days==1) , \n             aes(x=datevalue,y=ae_event,fill=aesev, color=aesev, hjust=0, vjust=0),\n             shape=\"\\u007c\", size=4, show.legend = F) +\n  geom_vline(data=csdates, \n             aes(xintercept=enrolldate), \n             linetype=2, \n             color=\"blue\", \n             alpha=0.4 ) +\n  geom_vline(data=csdates, \n             aes(xintercept=eosdate), \n             linetype=2, \n             color=\"blue\", \n             alpha=0.4) +\n  labs(x=NULL, y=NULL, color=\"Severity\")+\n  theme_bw()+\n  theme(legend.position = \"right\", \n        axis.text.x = element_text(angle = 45, hjust=1))\n  \n# Create pages for each unique ID to make the resulting file readable \nfor(i in 1:n_pages(vis)){\n  p_out &lt;-  vis + \n    facet_wrap_paginate(. ~ usubjid, \n                        ncol = 1, \n                        nrow = 1, \n                        page = i, \n                        scales = \"free\", \n                        labeller = labeller(usubjid=id_labels))+\n  ggh4x::facetted_pos_scales(x=x_scale_lim)\n  \n  print(p_out)\n}\n\n\n\n\nPDF Output\nIf you would like to convert your HTML output into a pdf, using the package pagedown is an easy way to do this. The code below provides a template to do so.\n\n#set footer to show page numbers\nfooter &lt;- div(\n  style = \"font-size: 8pt; text-align: right; width: 100%; padding-right: 12pt; font-family:TimesNewRoman\",\n  span(class = \"pageNumber\"), \"/\", span(class = \"totalPages\")\n)\n\n#set header to be blank\nheader &lt;- div(\n  style = \"font-size: 4pt; text-align: right; width: 100%; padding-right: 12pt;\",\n  span(\"\")\n)\n\npagedown::chrome_print(paste0('&lt;YOUR HTML FILE HERE&gt;'), # paste0('AE_Vis_',Sys.Date(),'.html')\n                       options=list(\n                         printBackground=TRUE,\n                         displayHeaderFooter = TRUE, \n                         footerTemplate = format(footer, indent = FALSE),\n                         headerTemplate = format(header, indent = FALSE)),\n                       output=paste0('AE_Vis_',Sys.Date(),'.pdf'))",
    "crumbs": [
      "Home",
      "Visualization Guides",
      "Adverse Event Plots"
    ]
  },
  {
    "objectID": "RMarkdownTips.html",
    "href": "RMarkdownTips.html",
    "title": "R Markdown",
    "section": "",
    "text": "R Markdown Cheatsheet\n\n\n\n\n\nMarkdown reference Guide\n\n\nPosit has a great initial guide to start learning R Markdown: https://rmarkdown.rstudio.com/lesson-1.html",
    "crumbs": [
      "Home",
      "R Markdown",
      "Tips"
    ]
  },
  {
    "objectID": "RMarkdownTips.html#cheatsheets-and-reference-guides",
    "href": "RMarkdownTips.html#cheatsheets-and-reference-guides",
    "title": "R Markdown",
    "section": "",
    "text": "R Markdown Cheatsheet\n\n\n\n\n\nMarkdown reference Guide\n\n\nPosit has a great initial guide to start learning R Markdown: https://rmarkdown.rstudio.com/lesson-1.html",
    "crumbs": [
      "Home",
      "R Markdown",
      "Tips"
    ]
  },
  {
    "objectID": "RMarkdownTips.html#other-tips",
    "href": "RMarkdownTips.html#other-tips",
    "title": "R Markdown",
    "section": "Other Tips",
    "text": "Other Tips\n\nRemember to close your code chunks Without the “```” at the end of your code chunk, when you try to render your document nothing will happen, but you will also not receive any errors.\nSet up your document\n\nSet yourself up for success! At the top of your document, create a code chunk that lists all the packages that you will use. This makes sure you’re ready for the rest of your workflow.\n```{r}\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(readxl)\n```\n\nName code chunks for easier navigation\n\nLabel code chunks to remember what each chunk is for. For example, you could call the chunk with your packages setup:\n```{r setup}\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(readxl)\n```\n\nAdd chunk options to customize your code chunks\n\nWhen you knit your file, you may want your code chunks to look a certain way. You can add chunk options to customize the components of your code chunks.\nFor example, if you want the code to show up in your knitted file without any messages or warnings, you can write message = FALSE and warning = FALSE in the chunk header:\n{r setup, message = FALSE, warning = FALSE} library(car)\n\nOr use global options for your chunks\n\nDid you know that you can use the same settings across all the code chunks in your R Markdown document? Set your global R options with options() and your knitr global chunk options with knitr::opts_chunk$set().\nFor example, if you know that you want all your numbers to have three digits and all your figures to have a width of 8, use the code below:\n```{r setup}\n# set up global R options\noptions(digits = 3)\n\n# set up knitr global chunk options\nknitr::opts_chunk$set(fig.width = 8)\n```",
    "crumbs": [
      "Home",
      "R Markdown",
      "Tips"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "consort.html",
    "href": "consort.html",
    "title": "Consort Diagrams",
    "section": "",
    "text": "Resources\n\n\n\nThe ggConsort package was created by Travis Gerke & Garrick Aden-Buie. Find his github instructions for ggconsort here: https://tgerke.github.io/ggconsort/.\n\n\n\nBackground\nCONSORT (Consolidated Standards of Reporting Trials) https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4520133/ is a scientific study protocol created to tackle issues that arise from randomized controlled trials (RCTs). There is a “checklist” of categories in the protocol (Title+Abstract, Introduction, Method, Results, Discussion, Other) that is to be included in parts of a published article, and the protocol also includes a flow diagram providing the reader with information on sstudy enrollment and flow. The ggConsort package uses ggplot2 and added functions to create a dynamic and reusable CONSORT diagram.\n\n\nCONSORT diagrams - ggconsort\nCONSORT diagrams are used to show enrollment/study progress and flow. They can often be used in regular reporting to study staff, or as final diagrams to show progress of trial phases. The github page for the package has many examples using a sample dataset, trail_data, that comes with the package https://tgerke.github.io/ggconsort/.\nThe following packages are necessary:\n\nggplot2\nggconsort\ndevtools - used to download package from github repository\ndplyr\n\n\nInstallation\n\n\nDisplay/Hide code\n# install.packages(\"devtools\")\n# devtools::install_github(\"tgerke/ggconsort\")\n\n\n\n\n\nExamples\nBelow is a simple CONSORT diagram from Gerke’s github page.\n\n\n\nSimple consort diagram from https://tgerke.github.io/ggconsort\n\n\nBelow is a more complicated CONSORT diagram from a multisite randomized clinical trial, using two strata (site and sex). The diagram is created in the same way as the above - just filtering out into additional groups and creating additional boxes and lines. This is a real CONSORT example from a study in our department - site names and strata have been slightly edited.\n\n\n\nCONSORT diagram showing two strata (site, sex) and randomization group assignments\n\n\n\n\n\nSimple consort diagram from https://tgerke.github.io/ggconsort\nCONSORT diagram showing two strata (site, sex) and randomization group assignments",
    "crumbs": [
      "Home",
      "Visualization Guides",
      "CONSORT Diagrams"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "BHDS Data Management Visualization Guide",
    "section": "",
    "text": "Introduction\nThis website is meant to be a resource for users interested in learning more about data visualization in R and producing reports with R Markdown, particularly for use cases that arise in our daily data management work. This site will contain code to help users get started with a variety of data visualizations that may be helpful in our work. While these plots can often be used to distribute summary data to project teams or other external audiences, many of these solutions can also help data managers ensure data quality and alert project staff if any data issues are present.\nFor a great overview and beginner’s guide to R Markdown, visit https://rmarkdown.rstudio.com/lesson-1.html.\nFor many basic, and some advanced R plots, consider familiarizing yourself with the great R Graph Gallery https://r-graph-gallery.com/. Many techniques that will be very beneficial in your work will be illustrated there, and will not be repeated in this resource. This site aims to expand on existing R visualization resources and generate templates for our group to leverage within their project work."
  }
]