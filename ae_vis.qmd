---
title: "Adverse Event Visualization"
format:
  html:
    theme: 
      light: flatly
      dark: darkly
    css: styles.css
    toc: true

---

### Background
The following code can be useful if you need to plot adverse events (AE) by study participant. The provided R Markdown script will produce an HTML file containing one plot per ID, highlighting AE duration across the study period. If your project has needs for additional variations of adverse event visualizations, please contact [browstev@iu.edu](mailto:browstev@iu.edu) with your suggestions!

### Adverse Event Plot 

![](Example AE Plot.png){.lightbox width=75%}

\

### Data Structure
To replicate the AE plot described on this page with this code, you will need to provide a dataset using the exact structure below. A test dataset is available to download [here](./Sample AE Data.csv){.external target="_blank"} 

#### Variable List
								
Variable	| Format	| Description
----------|---------|------------
usubjid	|Numeric or Alphanumeric	|Unique, anonymous, patient identifier. This can be in any project-specific format. _Required in all rows_
aedecod	|Character	|Adverse event name.   _Required in all rows_
aefinish	|Integer (Boolean)	|Has the adverse event concluded? 1=yes, 0=no. _Required in all rows_
aesev	|Integer	|Adverse event severity. Defaults to 1=Mild, 2=Moderate, 3=Severe, but this can be changed easily in script to accomodate any numeric sequence. _Required in all rows_
aestdate	|Date (mm/dd/yyyy)	|Adverse event start date. Must be in specified format. _Required in all rows_
aeendate	|Date (mm/dd/yyyy)	|Adverse event end date. Must be in specified format. _Can be left blank when ID is still on study (status=1)_
aeseq	|Integer | Numeric sequence denoting chronological order. _Required in all rows_
enrolldate	|Date (mm/dd/yyyy)	|Date participant enrolled into the study. _Required in all rows_
eosdate	|Date (mm/dd/yyyy)	|Date participant exited the study, or date study ended. _Required in all rows_
status | Integer | 0= OFF STUDY, 1= ON STUDY


#### Example Dataset
See below for an example of the input file:

```{r}
#| code-fold: false
#| code-summary: "Sample Data"
#| warning: false

infile="Sample AE Data.csv"
df <- read.csv(infile)
head(df)
```

### Complete R Markdown File

::: {.callout-tip title="Template R Markdown File"}
We have developed a template R Markdown file that is set to work with the sample dataset, and would only require small edits (as described below) to work with your own input file. The following sections on this page walk through some of the code highlights, and may help troubleshooting if you run into any issues modifying the code to fit your use case. You can download the R Markdown file using this link: [Template .Rmd File](./AE_Vis.Rmd){.external target="_blank"}

In that file, you will need to change the path to the "infile" dataframe on **line 32**. This should be the path to your AE data file.
:::


### Code Walkthrough
The following sections give a summary of the steps taken to process the input file and build the visualization. 

#### Package Dependencies
The code below is an efficient way to load packages at the beginning of an R script. The below code includes all of the package dependencies for the AE visualization code.

```{r setup}
#| warning: false
#| code-fold: false

packages <- c("tidyverse", "ggplot2", "scales", "RColorBrewer", 
              "forcats", "ggforce", "pagedown", "htmltools", "ggh4x")

##Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
  install.packages(packages[!installed_packages])
}

##Load Packages
invisible(lapply(packages, library, character.only = TRUE))

```
#### Data Wrangling
First, we read in the data file, process the data into required formats and calculate additional fields needed for the visualization. Next the data frame is transposed into a longer structure.
```{r}
#| code-fold: false
#| eval: false
#| lightbox:
#|   description: Adverse Event Plot

datain <- read.csv(infile) |> 
  mutate(across(c(aestdate, aeendate, eosdate, enrolldate), ~ as.Date(.x, "%m/%d/%Y" ))) |> 
  group_by(usubjid) |> 
  mutate(aeendate=if_else(is.na(aeendate), eosdate , as.Date(aeendate))) |> 
  mutate(ae_days=if_else(!is.na(aeendate), 
                         as.numeric(as.Date(aeendate, "%m/%d/%Y")-as.Date(aestdate, "%m/%d/%Y"))+1, 
                         NA_integer_)) |> 
  mutate(ae_event=paste0(aedecod, " (", aeseq, ")" )) |> 
  mutate(cutdate=as.Date(Sys.Date()))
  
datalong <- datain |> 
  select(usubjid, ae_event, aesev, aeseq, aefinish, enrolldate, eosdate, 
         aestdate, aeendate, ae_days, cutdate ) |>
  pivot_longer(cols = c(aestdate, aeendate), 
               names_to = "date_type", 
               values_to ="datevalue" ) |> 
  arrange(usubjid, desc(aeseq)) |> 
  ungroup()

```
#### AE Severity Scale
Next, we create a factor for the severity column.

::: {.callout-warning title="Severity Scale Modifications"}
This section would need to be modified if your severity rating is different than in the example dataset as described above. Also, the **scale_color_manual** line of code in the ggplot2 build (see below) would need to be modified to include more (or less) colors as applicable. See <https://r-graph-gallery.com/38-rcolorbrewers-palettes.html> for a description of color palettes and <https://www.datanovia.com/en/blog/the-a-z-of-rcolorbrewer-palette/> for more ways to work with the *Rcolorbrewer* package.
:::

```{r}
#| code-fold: false
#| eval: false
#| lightbox:
#|   description: Adverse Event Plot

datalong$aesev <- ordered(datalong$aesev,
                          levels = c(1,2,3),
                          labels = c("Mild", "Moderate", "Severe"))
```
#### Customizing the Visualization
Next we create cross-sectional datasets for all dates needed for the visualization, arguments to calculate the x-axis limits per ID, and a function for custom facet titles for each ID.
```{r}
#| code-fold: false
#| eval: false
#| lightbox:
#|   description: Adverse Event Plot


dataend <- datalong |> 
  filter(date_type=="aeendate")

csdates <- datalong |> 
  group_by(usubjid) |> 
  summarise(enrolldate=min(enrolldate, na.rm = T), 
            eosdate=max(eosdate, na.rm=T), 
            lastaeend=max(datevalue, na.rm=T),
            cutdate=max(cutdate, na.rm = T)) |> 
  mutate(cutdate=if_else(is.infinite(eosdate), 
                         as.Date(cutdate), 
                         as.Date(eosdate)))
  

# Create list of arguments to set the x-axis scale for each ID
# Will use cutdate below so we have an end point for patients still on study
x_scale_lim <- csdates |>
  str_glue_data("usubjid =={usubjid} ~ scale_x_date(limits = c(as.Date('{enrolldate}'),
                max(as.Date('{cutdate}'), as.Date('{lastaeend}'))  ),
                date_labels = '%m/%d/%Y',
               expand =  expansion(mult = c(.25, .25)),
               breaks=pretty_breaks())") %>% 
  str_flatten(", ")  %>% 
  str_c("list(", ., ")") %>% 
  parse(text = .) %>% 
  eval()


# Create label for facet strip
id_labels <- as_labeller(function(x) paste0('Adverse Events for Subject ID = ', x ))
```
#### Build it!
Finally we create the ggplot object and print the report!
```{r}
#| code-fold: false
#| eval: false
#| lightbox:
#|   description: Adverse Event Plot

# Structure Main Plot
vis <- ggplot(datalong, 
              aes(y=fct_reorder(ae_event, aeseq),  
                  x=datevalue, 
                  color=aesev, 
                  label=paste0(" ", ae_days, "d"))) +
  geom_line(linewidth=5) +
  facet_wrap_paginate(. ~ usubjid, 
                      ncol = 1, 
                      nrow=1, 
                      scales = "free", 
                      labeller = labeller(usubjid=id_labels)) + 
  scale_color_manual(values = c("#1b9e77",  "#7570b3", "#d95f02"))+
  geom_text(data=subset(dataend,aefinish == 1), 
            size=3, 
            color="black",  
            aes(hjust=0))+
  geom_point(data=subset(dataend,aefinish == 0) , 
             aes(x=datevalue,y=ae_event,fill=aesev, color=aesev, hjust=0, vjust=0),
             shape="\u279c", size=6, show.legend = F) +
  geom_point(data=subset(dataend,ae_days==1) , 
             aes(x=datevalue,y=ae_event,fill=aesev, color=aesev, hjust=0, vjust=0),
             shape="\u007c", size=4, show.legend = F) +
  geom_vline(data=csdates, 
             aes(xintercept=enrolldate), 
             linetype=2, 
             color="blue", 
             alpha=0.4 ) +
  geom_vline(data=csdates, 
             aes(xintercept=eosdate), 
             linetype=2, 
             color="blue", 
             alpha=0.4) +
  labs(x=NULL, y=NULL, color="Severity")+
  theme_bw()+
  theme(legend.position = "right", 
        axis.text.x = element_text(angle = 45, hjust=1))
  
# Create pages for each unique ID to make the resulting file readable 
for(i in 1:n_pages(vis)){
  p_out <-  vis + 
    facet_wrap_paginate(. ~ usubjid, 
                        ncol = 1, 
                        nrow = 1, 
                        page = i, 
                        scales = "free", 
                        labeller = labeller(usubjid=id_labels))+
  ggh4x::facetted_pos_scales(x=x_scale_lim)
  
  print(p_out)
}

```

### PDF Output
If you would like to convert your HTML output into a pdf, using the package *pagedown* is an easy way to do this. The code below provides a template to do so.

```{r}
#| code-fold: false
#| eval: false

#set footer to show page numbers
footer <- div(
  style = "font-size: 8pt; text-align: right; width: 100%; padding-right: 12pt; font-family:TimesNewRoman",
  span(class = "pageNumber"), "/", span(class = "totalPages")
)

#set header to be blank
header <- div(
  style = "font-size: 4pt; text-align: right; width: 100%; padding-right: 12pt;",
  span("")
)

pagedown::chrome_print(paste0('<YOUR HTML FILE HERE>'), # paste0('AE_Vis_',Sys.Date(),'.html')
                       options=list(
                         printBackground=TRUE,
                         displayHeaderFooter = TRUE, 
                         footerTemplate = format(footer, indent = FALSE),
                         headerTemplate = format(header, indent = FALSE)),
                       output=paste0('AE_Vis_',Sys.Date(),'.pdf'))
```

