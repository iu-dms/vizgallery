---
title: "Raincloud Plots"
format:
  html:
    theme: 
      light: flatly
      dark: darkly
    css: styles.css
    toc: true
---

### Resources
Much of the explanation below comes from Cedric Scherer, a visualization and design expert known for many things, including his work with ggplot2. Find his work here: <https://www.cedricscherer.com/>, and his blog on raincloud plots here: <https://www.cedricscherer.com/2021/06/06/visualizing-distributions-with-raincloud-plots-and-how-to-create-them-with-ggplot2/#back1>

### Background
Rain cloud plots were officially introduced in 2019 (<https://wellcomeopenresearch.org/articles/4-63>) as an approach to overcome issues of hiding the true data distribution when plotting in typical charts such as box plots. Instead, raincloud plots combine several chart types to visualize the raw data, the distribution of the data as density, and key summary statistics at the same time.


```{r setup, include=FALSE}

# Needed Package names
packages <- c("tidyverse", "kableExtra", "ggplot2", "scales", "RColorBrewer", "zoo", "readxl" , "rmarkdown", "htmltools", "palmerpenguins", "downlit")
# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
  install.packages(packages[!installed_packages])
}
# Attach Packages
invisible(lapply(packages, library, character.only = TRUE))

```
#### Box Plots
Box plots are used often in our type of work for summary statistics/reports, but they have limitations.

```{r boxplots1}
#| code-fold: true
#| code-summary: "Display code to generate dummy data"

set.seed(2021)

grp1 <- tibble(value = seq(0, 20, length.out = 75), 
               group = "Group 1")

grp2 <- tibble(value = c(rep(0, 5), rnorm(20, 2, .2), rnorm(50, 6, 1), 
                         rnorm(50, 14.5, 1), rnorm(20, 18, .2), rep(20, 5)), 
               group = "Group 2")

grp3 <- tibble(value = rep(seq(0, 20, length.out = 5), 5), 
               group = "Group 3")

dummy <- bind_rows(grp1, grp2, grp3)

```


```{r boxplots2}
ggplot(dummy, aes(x = group, y = value)) +
  geom_boxplot(fill = "grey92")

```
The above plot summarizes the data by group, but does this give a complete picture of the data?

::: {.callout-tip}
## Box Plot Interpretation

* **Questions:**
    + How many observations in each group?
    + Are distribution patterns across the groups similar?


* **How can we improve this visualization?**
    + Add raw data
    + Add overall distribution 

:::

### Enter The Raincloud Plot

![Cedric Scherer shared this post about his feelings on box plots versus raincloud plots](yesno.png){.lightbox}

Raincloud plots can be used to visualize raw data, the distribution of the data, and key summary statistics at the same time. These comprise of multiple plots added together, consisting of a halved violin plot, a box plot, and the raw data as some kind of scatter plot.

We'll use 3 distinct elements to make these plots as noted above, leveraging 4 different R packages:
1. ggplot2
2. ggdist
3. ggbeeswarm

#### Basic Version

```{r, rcbasic}
#| code-fold: show
#| code-summary: "Display/Hide code"
#| warning: false

library(palmerpenguins)
pp <- penguins

ggplot(pp, aes(x = species, y = bill_length_mm)) + 
  ggdist::stat_halfeye(
    adjust = .5, 
    width = .6, 
    .width = 0, 
    justification = -.2, 
    point_colour = NA
  ) + 
  geom_boxplot(
    width = .15, 
    outlier.shape = NA
  ) +
  ggbeeswarm::geom_quasirandom(
    shape=21,
    width=.2) 

```
The formatting possibilities are endless! Using these separate plots allow maximum flexibility to fit your use case.

#### Formatted Version
```{r}
#| code-fold: show
#| code-summary: "Display code"
#| code-link: true
#| code-block-bg: true
#| code-block-border-left: "#31BAE9"
#| code-overflow: wrap
#| warning: false



new_labels <- c("Adelie"="ADELIE",
                      "Gentoo"="GENTOO",
                      "Chinstrap"="CHINSTRAP")
pal <- c("#FF8C00", "#A034F0", "#159090")

rcplot <- function(titletext, captext){
  ggplot(pp, aes(x=species, y=bill_length_mm, fill=species)) +
    
  ggdist::stat_halfeye(
      adjust = .5, 
      width = 1.0, 
      .width = 0, 
      justification = -0.3, 
      point_colour = NA,
      alpha=0.6)+
    
  geom_boxplot(width=0.4, color="black", outlier.shape = NA, alpha=.9) +
    
  ggbeeswarm::geom_quasirandom(aes(color=species),
    shape=21,                           
    size = 1,
    alpha = 0.3,
    width = .2) +
    
  labs(x='', y='Bill Length (mm)', title = titletext, subtitle = captext)+
  scale_color_manual(values = pal, guide = "none") +
  scale_fill_manual(values = pal, guide = "none") +
  facet_grid(cols=vars(species), scales="free_x", labeller = labeller(species=new_labels))+
  theme_classic()+
  theme(legend.position="none", 
        legend.title = element_blank(), 
        plot.title = element_text(size=14, face="bold"),
        plot.subtitle = element_text(size=10, lineheight = 0.5 ), 
        axis.text.y=element_text(size=8, face="plain"), 
        axis.title.y = element_text(size=8, face="plain"), 
        axis.text.x=element_blank(),
        # axis.ticks.y=element_blank(),
        axis.ticks.x=element_blank())+
  theme(strip.background =element_rect(fill='white'))

}

plot <- rcplot(paste0("Figure 1. Bill Length by Species (n=", as.numeric(length(na.omit(pp$bill_length_mm))) , ")"),
               "Bill Length in mm by species from the palmer penguins dataset")

plot


```

:::{.callout-note}
Use caution with color usage, as it is often not necessary. If reports will be consumed electronically, colors like used above would be accepatable. However, in some cases, say if reports will be printed often, using a color scheme of sequential blues (for example) would save sites/project teams ink usage and by most user friendly. See below for a custom blue scale that has worked well when sending to resource limited settings where printed reports are needed.
:::

```{r bluescale}
#| code-link: true
#| code-block-bg: true
#| code-block-border-left: "#31BAE9"

BLUE_0 <- "#dbe3ed" 
BLUE_25 <- "#b3c4e0"
BLUE_50 <-"#788dae"  
BLUE_75 <- "#5a7296"
BLUE_99 <-  "#3c567d" 
BLUE_100 <-  "#334b6e" 
NAGRAY <- "#cccccc" # GRAY for NA values
```

